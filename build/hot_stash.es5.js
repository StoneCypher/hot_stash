'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make_cacher = exports.get_or_make_and_set = exports.get_cache = exports.set_keep_cache = exports.set_cache = exports.has_cache = exports.cache_contents_for = exports.make_fname = undefined;

var _path = require('path');

var _glob = require('glob');

var _fs = require('fs');

/***
 *
 *  Base of make_fname and make_fname_glob, which are almost the same thing
 */

// Todo:
//
// 1. Convert to TypeScript (sorry, just don't know it yet)


/***
 *
 *  Generic cacher
 *
 *  This is a generic low-quality live disk cacher.  This checks current disk
 *  state, and either returns it or creates a new one, stores it, then returns
 *  that.  This makes no effort to remember previous disk state (yet.)
 *
 *  All functions other than `make_cacher/2` start with `path` and `name` in
 *  their arglist.  Path is where the cacher is looking on disk; name is the
 *  name that the cacher is using as an instance name (two instances should not
 *  share a name.)  In the lifetime of a cacher instance, these two values
 *  generally should not change.
 *
 *  `make_cacher` just creates an object with lambdas that partially apply those
 *  two values for you as a convenience.
 *
 *  This cache is not atomic.  It is possible, though not likely, that the
 *  disk state could change under this cacher's feet while it's working.  More
 *  testing is warranted; this thing should be made more durable around those
 *  sorts of situations.
 *
 *  Because of its mechanism of storage, this cacher is currently only able to
 *  store JSON.
 */

var _make_fname_base = function _make_fname_base(uPath, uName, uItem, center) {

  var final_path = '';

  if (uPath === '') {} // eslint-disable-line no-empty
  else if (uPath[final_path.length - 1] !== '/') {
      final_path = uPath + _path.sep;
    } else {
      final_path = uPath;
    }

  return '' + final_path + uName + '___' + uItem + '___' + center + '.hot_stash';
};

/***
 *
 *  Makes a filename given a path, a name, and an item.
 *
 *  Controls for trailing slashes in paths.
 */

var make_fname = function make_fname(uPath, uName, uItem) {

  var ts = new Date().getTime().toString();

  return _make_fname_base(uPath, uName, uItem, ts);
};

/***
 *
 *  Makes a glob for finding files matching a filename given a path, a name, and an item, disregarding the timestamp.
 *
 *  Controls for trailing slashes in paths.
 *
 *  @param {string} uPath - Path on disk of the cache storage
 *  @param {string} uName - Name of the caller
 *  @param {string} uItem - Name of the item being cached
 *
 *  @returns {string} - The glob to be used to match files for this cache
 *
 *  @see _make_fname_base
 *
 *  @example - const cache_tgt = make_fname_glob('./cache/', 'general cache', 'parse tree');
 */

var make_fname_glob = function make_fname_glob(uPath, uName, uItem) {
  return _make_fname_base(uPath, uName, uItem, '*');
}; // * as the glob wildcard, where the timestamp would be, y'see


/***
 *
 *  Looks up the on-disk cache for a given item, under a given path/name.
 */

var cache_contents_for = function cache_contents_for(uPath, uName, uItem) {
  return (0, _glob.sync)(make_fname_glob(uPath, uName, uItem));
};

/***
 *
 *  Looks up the on-disk cache for a given item, under a given path/name.
 */

var best_cache_match_for = function best_cache_match_for(uPath, uName, uItem) {

  var candidates = cache_contents_for(uPath, uName, uItem);

  if (candidates.length === 0) {
    throw new Error('\'no best cache match - no cache entries for \'' + uPath + '\' \'' + uName + '\' \'' + uItem + '\'');
  }

  // unix microtimes Just Sort (tm); last is latest
  candidates.sort();

  return candidates[candidates.length - 1];
};

/***
 *
 *  Looks up the on-disk cache for a given item, under a given path/name.
 */

var _get_cache = function _get_cache(uPath, uName, uItem) {
  return { item: uItem, value: JSON.parse((0, _fs.readFileSync)(best_cache_match_for(uPath, uName, uItem), 'utf8')) };
};

var _has_cache = function _has_cache(uPath, uName, uItem) {
  return cache_contents_for(uPath, uName, uItem).length > 0;
};

var set_keep_cache = function set_keep_cache(uPath, uName, uItem, uValue) {
  // eslint-disable-line flowtype/no-weak-types

  var fname = make_fname(uPath, uName, uItem);
  var val = void 0;

  try {
    val = JSON.stringify(uValue);
  } catch (e) {
    throw new TypeError('Could not convert \'uValue\' to JSON string - ' + e);
  }

  try {
    (0, _fs.writeFileSync)(fname, val, 'utf8');
  } catch (e) {
    throw new TypeError('Could not write to disk - ' + e);
  }
};

var _set_cache = function _set_cache(uPath, uName, uItem, uValue) {
  // eslint-disable-line flowtype/no-weak-types

  // take the candidate list before writing, so it won't contain our new one
  var candidates = cache_contents_for(uPath, uName, uItem);

  // write a new one
  set_keep_cache(uPath, uName, uItem, uValue);

  // the one we just wrote is the one that isn't in the candidate list, so, nuke the others
  del_file_list(candidates);
};

var del_file_list = function del_file_list(uFileList) {
  return uFileList.map(_fs.unlinkSync);
};

var _del_cache = function _del_cache(uPath, uName, uItem) {
  return del_file_list(cache_contents_for(uPath, uName, uItem));
};

/***
 *
 *  Checks the on-disk cache.  If there's something, return that.  If not, call
 *  maker, store the result, and use that instead.
 */

var _get_or_make_and_set = function _get_or_make_and_set(path, name, item, maker) {
  return _has_cache(path, name, item) ? _get_cache(path, name, item) : _set_cache(path, name, item, maker());
};

/***
 *
 *  This is just a voluntary convenience to let you ditch managing the path and
 *  the name constantly.  This offers no required functionality and you're
 *  welcome to ditch if it isn't convenient.
 */

var make_cacher = function make_cacher(path, name) {
  return {

    has_cache: function has_cache(item) {
      return _has_cache(path, name, item);
    },
    set_cache: function set_cache(item, value) {
      return _set_cache(path, name, item, value);
    }, // eslint-disable-line flowtype/no-weak-types
    get_cache: function get_cache(item) {
      return _get_cache(path, name, item);
    },
    del_cache: function del_cache(item) {
      return _del_cache(path, name, item);
    },
    get_or_make_and_set: function get_or_make_and_set(item, maker) {
      return _get_or_make_and_set(path, name, item, maker);
    }

  };
};

exports.make_fname = make_fname;
exports.cache_contents_for = cache_contents_for;
exports.has_cache = _has_cache;
exports.set_cache = _set_cache;
exports.set_keep_cache = set_keep_cache;
exports.get_cache = _get_cache;
exports.get_or_make_and_set = _get_or_make_and_set;
exports.make_cacher = make_cacher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,